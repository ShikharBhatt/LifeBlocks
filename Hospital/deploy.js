const Tx = require('ethereumjs-tx')
const Web3 = require('web3');
const web3 = new Web3('http://localhost:7545')

const government = '0x266652513c56Fabc34a7080Dd60c7357417cd6c0'

const privateKeyGovernment = Buffer.from(process.env.PRIVATE_KEY, 'hex')

//console.log(privateKeyGovernment)
const data = '0x608060405234801561001057600080fd5b50610e64806100206000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631a3cd59a1461007d5780632c4f5a171461015d57806351d70bc4146101ba578063935a108d1461030657806396282ba3146103c9578063ba99af7014610432575b600080fd5b34801561008957600080fd5b506100a8600480360381019080803590602001909291905050506104ee565b60405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015610120578082015181840152602081019050610105565b50505050905090810190601f16801561014d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561016957600080fd5b506101a060048036038101908080359060200190929190803590602001908201803590602001919091929391929390505050610600565b604051808215151515815260200191505060405180910390f35b3480156101c657600080fd5b506101e560048036038101908080359060200190929190505050610861565b60405180806020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838103835287818151815260200191508051906020019080838360005b83811015610261578082015181840152602081019050610246565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156102c75780820151818401526020810190506102ac565b50505050905090810190601f1680156102f45780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561031257600080fd5b506103c760048036038101908080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506109e1565b005b3480156103d557600080fd5b50610430600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610bce565b005b34801561043e57600080fd5b50610473600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c24565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104b3578082015181840152602081019050610498565b50505050905090810190601f1680156104e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606000806001600085815260200190815260200160002060000160016000868152602001908152602001600020600101546001600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b505050505092509250925092509193909250565b60008073ffffffffffffffffffffffffffffffffffffffff166001600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4163636f756e7420646f6573206e6f742065786973740000000000000000000081525060200191505060405180910390fd5b8282604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b6020831015156107385780518252602082019150602081019050602083039250610713565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166001600086815260200190815260200160002060030160405160200180828054600181600116156101000203166002900480156107dd5780601f106107bb5761010080835404028352918201916107dd565b820191906000526020600020905b8154815290600101906020018083116107c9575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156108265780518252602082019150602081019050602083039250610801565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161490509392505050565b6001602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090d5780601f106108e25761010080835404028352916020019161090d565b820191906000526020600020905b8154815290600101906020018083116108f057829003601f168201915b5050505050908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d75780601f106109ac576101008083540402835291602001916109d7565b820191906000526020600020905b8154815290600101906020018083116109ba57829003601f168201915b5050505050905084565b6109e9610cd4565b8381600001819052508281602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081816060018190525080600160008781526020019081526020016000206000820151816000019080519060200190610a6d929190610d13565b506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610adb929190610d13565b509050507fedddd1e46a8352ac33053db63122c02ccd1e402ffa2fec9e0c8ad5d02798d587338260000151836020015188604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b8a578082015181840152602081019050610b6f565b50505050905090810190601f168015610bb75780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610c20929190610d93565b5050565b60006020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ccc5780601f10610ca157610100808354040283529160200191610ccc565b820191906000526020600020905b815481529060010190602001808311610caf57829003601f168201915b505050505081565b6080604051908101604052806060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d5457805160ff1916838001178555610d82565b82800160010185558215610d82579182015b82811115610d81578251825591602001919060010190610d66565b5b509050610d8f9190610e13565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610dd457805160ff1916838001178555610e02565b82800160010185558215610e02579182015b82811115610e01578251825591602001919060010190610de6565b5b509050610e0f9190610e13565b5090565b610e3591905b80821115610e31576000816000905550600101610e19565b5090565b905600a165627a7a72305820e9197a4d987c50512052c523975a85c1b395a37f978e9ef58923294abd11af480029'
//get the transaction count from account 1 as it is the sender
web3.eth.getTransactionCount(government, (err , txCount) => {
    //Transaction Object
    const txObject = {
        nonce : web3.utils.toHex(txCount),          //all paramters should be in Hex
        gasLimit : web3.utils.toHex(4700000),
        gasPrice : web3.utils.toHex(web3.utils.toWei('10','gwei')),
        data : data
    }

//Sign a transaction
    const tx = new Tx(txObject)
    tx.sign(privateKeyGovernment)

    const serializedTransaction = tx.serialize()
    const raw = '0x' + serializedTransaction.toString('hex')

//Broadcast a transaction
    web3.eth.sendSignedTransaction(raw , (err , txHash) => {
        console.log('txHash : ' , txHash)
    })
})

//Using the deployed contract